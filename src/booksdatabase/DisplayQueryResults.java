// Assignment: 4
// Name: Cory Siebler
// StudentID: 1000832292
// Lecture Topic: Lecture 14 - JPA
// Description: 
package booksdatabase;

import java.util.Comparator;

/*
 An object of this type is used to manage the data flow between the program
 and the database.
 */
import javax.persistence.EntityManager;

/*
 An object of this type is used to create an EntityManager for the persistence
 unit.
 */
import javax.persistence.EntityManagerFactory;

/*
 Static method createEntityManagerFactory of this class is used to create the
 EntityManagerFactory for the specified persistence unit.
 */
import javax.persistence.Persistence;

/*
 An object of this type is returned by the EntityManager when you create a
 query. You then execute the query to get data from the database.
 */
import javax.persistence.TypedQuery;

/**
 *
 * @author csiebler
 */
public class DisplayQueryResults {

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        /*
         Create the EntityManagerFactory object.
         
         Static method createEntityManagerFactory of class Persistence
         receives as an argument the persistence unit name, specified in the
         persistence.xml file.
         */
        EntityManagerFactory entityManagerFactory
                = Persistence.createEntityManagerFactory("BooksPU");

        /*
         Create an application-managed EntityManager that handles interactions
         between the app and the database.
         */
        EntityManager entityManager = entityManagerFactory.createEntityManager();

        /*
         Return all Authors entities in the Authors table.
         
         Each Authors entity represents a row in the table.
         
         The first argument to createQuery is a String written in the Java
         Persistence Query Language (JPQL).
         
         The second argument specifies the Class object representing the type
         of objects the query returns: Authors.
         
         JPQL information: http://docs.oracle.com/javaee/7/tutorial/doc/
         persistence-querylanguage.htm
         */
        TypedQuery<Authors> findAllAuthors
                = entityManager.createQuery("SELECT author FROM Authors AS author",
                        Authors.class);

        System.out.printf("Authors Table of Book Database:%n%n");
        System.out.printf("%-12s%-13s%s%n", "Author ID", "First Name", "Last Name");

        /*
         getResultList returns a List<Authors>.
         
         The stream's forEach method displays each Authors object in the List.
         
         The lambda expression passed to forEach obtains the "getter" info
         about the Authors.
         */
        findAllAuthors.getResultList().stream().forEach((author) -> {
            System.out.printf("%-12d%-13s%s%n", author.getAuthorid(), author.getFirstname(), author.getLastname());
        });
        
        /*
         TypedQuery that returns all authors.
         
         One of the default options when creating the books database's
         persistence unit was "Generate Named Query Annotations for Persistent
         Fields".
         
         The object-relational mapping tool autogenerated the following
         queries:
         "Authors.findAll" - Returns the List of all Authors entities.
         "Authors.findByAuthorid"
         "Authors.findByFirstname"
         "Authors.findBylastname"
         
         It's also possible to specify arguments to queries.
         */
        TypedQuery<Authors> findAllAuthorsAlt
                = entityManager.createNamedQuery("Authors.findAll", Authors.class);

        /*
         Display titles grouped by author
         */
        System.out.printf("Titles grouped by author:%n");

        /*
         Get the List of Authors, then display the results
         */
        findAllAuthorsAlt.getResultList().stream()
                .sorted(Comparator.comparing(Authors::getLastname)
                        .thenComparing(Authors::getFirstname))
                .forEach((Authors author) -> {
                    System.out.printf("%n%s %s:%n", author.getFirstname(), author.getLastname());
                    author.getTitlesList().stream().forEach((title) -> {
                        System.out.printf("\t%s%n", title.getTitle());
                    });
                });

        /*
         TypedQuery that returns all titles.
         */
        TypedQuery<Titles> findAllTitles
                = entityManager.createNamedQuery("Titles.findAll", Titles.class);

        /*
         Display authors grouped by title
         */
        System.out.printf("Authors grouped by title:%n");

        /*
         Get the List of Titles, then display the results
         */
        findAllTitles.getResultList().stream()
                .sorted(Comparator.comparing(Titles::getTitle))
                .forEach((Titles title) -> {
                    System.out.println(title.getTitle());
                    title.getAuthorsList().stream().forEach((author) -> {
                        System.out.printf("\t%s%n", author.getFirstname(), author.getLastname());
                    });
                });
    }

}
