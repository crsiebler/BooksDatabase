// Assignment: 4
// Name: Cory Siebler
// StudentID: 1000832292
// Lecture Topic: Lecture 14 - JPA
// Description: 
package booksdatabase;

import java.io.Serializable;
import java.util.List;
import javax.persistence.Basic;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.Table;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

/**
 * autogenerated class Authors.
 *
 * Does not contain any code that interacts with a database.
 *
 * Instead, it contains various JPA annotations that the
 * object-relational-mapping tools autogenerate.
 *
 * When you compile the entity classes, the compiler looks at the annotations
 * and adds JPA capabilities that help manage the interactions with the
 * database.
 *
 * This is known as injecting capabilites.
 *
 * For the entity classes, the annotations include:
 *
 * @Entity-- Specifies that the class is an entity class.
 * @Table-- Specifies the entity class's corresponding database table.
 * @NamedQueries/@NamedQuery-- Specifies a collection of annotations that
 * declare various named queries.
 */
@Entity
@Table(name = "AUTHORS")
@XmlRootElement
@NamedQueries({
    @NamedQuery(name = "Authors.findAll", query = "SELECT a FROM Authors a"),
    @NamedQuery(name = "Authors.findByAuthorid", query = "SELECT a FROM Authors a WHERE a.authorid = :authorid"),
    @NamedQuery(name = "Authors.findByFirstname", query = "SELECT a FROM Authors a WHERE a.firstname = :firstname"),
    @NamedQuery(name = "Authors.findByLastname", query = "SELECT a FROM Authors a WHERE a.lastname = :lastname")})
public class Authors implements Serializable {

    private static final long serialVersionUID = 1L;

    /*
     @Id - Used to indicate the instance variable that corresponds to the
     database table's primary key.
     
     @Basic - Specifies whether the column is optional.
     
     @Column - Specifies the database column to which the instance variable
     corresponds.
     */
    @Id
    @GeneratedValue(strategy=GenerationType.IDENTITY)
    @Basic(optional = false)
    @Column(name = "AUTHORID")
    private Integer authorid;

    @Basic(optional = false)
    @Column(name = "FIRSTNAME")
    private String firstname;

    @Basic(optional = false)
    @Column(name = "LASTNAME")
    private String lastname;

    /*
     @JoinTable/@JoinColumn - These specify relationships between tables
     (foreign keys.)
     */
    @JoinTable(name = "AUTHORISBN", joinColumns = {
        @JoinColumn(name = "AUTHORID", referencedColumnName = "AUTHORID")}, inverseJoinColumns = {
        @JoinColumn(name = "ISBN", referencedColumnName = "ISBN")})
    /*
     @ManyToMany - Specifies the relationship between entities. For the Titles
     entity class, there is a many-to-many relationship between books and
     titles.
     */
    @ManyToMany
    private List<Titles> titlesList;

    /**
     *
     */
    public Authors() {
        
    }

    /**
     *
     * @param authorid
     */
    public Authors(Integer authorid) {
        this.authorid = authorid;
    }

    /**
     *
     * @param authorid
     * @param firstname
     * @param lastname
     */
    public Authors(Integer authorid, String firstname, String lastname) {
        this.authorid = authorid;
        this.firstname = firstname;
        this.lastname = lastname;
    }

    /**
     *
     * @return
     */
    public Integer getAuthorid() {
        return authorid;
    }

    /**
     *
     * @param authorid
     */
    public void setAuthorid(Integer authorid) {
        this.authorid = authorid;
    }

    /**
     *
     * @return
     */
    public String getFirstname() {
        return firstname;
    }

    /**
     *
     * @param firstname
     */
    public void setFirstname(String firstname) {
        this.firstname = firstname;
    }

    /**
     *
     * @return
     */
    public String getLastname() {
        return lastname;
    }

    /**
     *
     * @param lastname
     */
    public void setLastname(String lastname) {
        this.lastname = lastname;
    }

    /**
     *
     * @return
     */
    @XmlTransient
    public List<Titles> getTitlesList() {
        return titlesList;
    }

    /**
     *
     * @param titlesList
     */
    public void setTitlesList(List<Titles> titlesList) {
        this.titlesList = titlesList;
    }

    /**
     *
     * @return
     */
    @Override
    public int hashCode() {
        int hash = 0;
        hash += (authorid != null ? authorid.hashCode() : 0);
        return hash;
    }

    /**
     *
     * @param object
     * @return
     */
    @Override
    public boolean equals(Object object) {
        // @TODO Warning - this method won't work in the case the id fields are not set
        if (!(object instanceof Authors)) {
            return false;
        }

        Authors other = (Authors) object;

        return !((this.authorid == null && other.authorid != null)
                || (this.authorid != null && !this.authorid.equals(other.authorid)));
    }

    /**
     *
     * @return
     */
    @Override
    public String toString() {
        return "booksdatabaseexample.Authors[ authorid=" + authorid + " ]";
    }

}
